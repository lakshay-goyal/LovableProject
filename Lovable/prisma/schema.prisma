generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id
  name          String
  email         String
  emailVerified Boolean   @default(false)
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @default(now()) @updatedAt
  sessions      Session[]
  accounts      Account[]
  projects      Project[]

  @@unique([email])
  @@map("user")
}

model Session {
  id        String   @id
  expiresAt DateTime
  token     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt

  @@map("account")
}

model Verification {
  id         String   @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @default(now()) @updatedAt

  @@map("verification")
}

enum ProjectVisibility {
  PUBLIC
  PRIVATE
}

enum MessageFrom {
  USER
  ASSISTANT
}

model Project {
  id         String            @id @default(cuid())
  title      String
  visibility ProjectVisibility @default(PUBLIC)
  userId     String
  user       User              @relation(fields: [userId], references: [id], onDelete: Cascade)

  sandboxId  String?
  previewUrl String?
  lastSeenAt DateTime?

  currentSnapshotS3Key String?
  currentSnapshotAt  DateTime?

  chatHistories ChatHistory[]
  jobs          Job[]
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @default(now()) @updatedAt

  @@map("project")
}

model ChatHistory {
  id        String      @id @default(cuid())
  from      MessageFrom
  content   String?
  projectId String
  project   Project     @relation(fields: [projectId], references: [id], onDelete: Cascade)
  createdAt DateTime    @default(now())
  updatedAt DateTime    @default(now()) @updatedAt

  @@map("chat_history")
}

model Job {
  id        String   @id @default(cuid())
  projectId String
  project   Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  status    String   @default("pending")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("job")
}
